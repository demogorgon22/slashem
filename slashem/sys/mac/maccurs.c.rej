***************
*** 7,20 ****
  #include "macwin.h"
  
  #include <Folders.h>
! #include <Windows.h>
! #include <ToolUtils.h>
  #include <Resources.h>
- #include <Files.h>
  
  
  static Boolean winFileInit = 0;
! static unsigned char winFileName [32];
  static long winFileDir;
  static short winFileVol;
  
--- 7,18 ----
  #include "macwin.h"
  
  #include <Folders.h>
! #include <TextUtils.h>
  #include <Resources.h>
  
  
  static Boolean winFileInit = 0;
! static unsigned char winFileName [32] = "\pNetHack Preferences";
  static long winFileDir;
  static short winFileVol;
  
***************
*** 29,39 ****
  
  static WinPosSave savePos [kLastWindowKind + 1];
  
- static void InitWinFile (void);
- static void SavePosition (short, short, short);
- static void SaveSize (short, short, short);
- 
- 
  
  static void
  InitWinFile (void)
--- 27,32 ----
  
  static WinPosSave savePos [kLastWindowKind + 1];
  
  
  static void
  InitWinFile (void)
***************
*** 55,68 ****
  	if (sh && *sh) {
  		BlockMove (*sh, winFileName, **sh + 1);
  		ReleaseResource ((Handle) sh);
- 	} else {
- 		BlockMove ("\PNetHack Preferences", winFileName, 20);
  	}
  	if (HOpen (winFileVol, winFileDir, winFileName, fsRdPerm, &ref)) {
  		return;
  	}
  	len = sizeof (savePos);
! 	if (! FSRead (ref, &len, savePos)) {
  		winFileInit = 1;
  	}
  	FSClose (ref);
--- 48,59 ----
  	if (sh && *sh) {
  		BlockMove (*sh, winFileName, **sh + 1);
  		ReleaseResource ((Handle) sh);
  	}
  	if (HOpen (winFileVol, winFileDir, winFileName, fsRdPerm, &ref)) {
  		return;
  	}
  	len = sizeof (savePos);
! 	if (!FSRead (ref, &len, savePos)) {
  		winFileInit = 1;
  	}
  	FSClose (ref);
***************
*** 75,82 ****
  	short ref;
  	long len;
  
! 	if (! winFileInit) {
! 		if (! winFileName [0]) {
  			return;
  		}
  		HCreate (winFileVol, winFileDir, winFileName, MAC_CREATOR, PREF_TYPE);
--- 66,73 ----
  	short ref;
  	long len;
  
! 	if (!winFileInit) {
! 		if (!winFileName [0]) {
  			return;
  		}
  		HCreate (winFileVol, winFileDir, winFileName, MAC_CREATOR, PREF_TYPE);
***************
*** 95,114 ****
  RetrievePosition (short kind, short *top, short *left) {
  Point p;
  
- 	InitWinFile ();
  	if (kind < 0 || kind > kLastWindowKind) {
  		dprintf ("Retrieve Bad kind %d", kind);
  		return 0;
  	}
! 	if (! savePos [kind].validPos) {
  		dprintf ("Retrieve Not stored kind %d", kind);
  		return 0;
  	}
! 	*top = savePos [kind].top;
! 	*left = savePos [kind].left;
! 	p.h = *left;
! 	p.v = *top;
! 	dprintf ("Retrieve Kind %d Point (%d,%d)", kind, *left, *top);
  	return PtInRgn (p, GetGrayRgn ());
  }
  
--- 86,105 ----
  RetrievePosition (short kind, short *top, short *left) {
  Point p;
  
  	if (kind < 0 || kind > kLastWindowKind) {
  		dprintf ("Retrieve Bad kind %d", kind);
  		return 0;
  	}
! 	InitWinFile ();
! 	if (!savePos [kind].validPos) {
  		dprintf ("Retrieve Not stored kind %d", kind);
  		return 0;
  	}
! 	p.v = savePos [kind].top;
! 	p.h = savePos [kind].left;
! 	*left = p.h;
! 	*top = p.v;
! 	dprintf ("Retrieve Kind %d Pt (%d,%d)", kind, p.h, p.v);
  	return PtInRgn (p, GetGrayRgn ());
  }
  
***************
*** 118,128 ****
  {
  	Point p;
  
- 	InitWinFile ();
  	if (kind < 0 || kind > kLastWindowKind) {
  		return 0;
  	}
! 	if (! savePos [kind].validSize) {
  		return 0;
  	}
  	*width = savePos [kind].width;
--- 109,119 ----
  {
  	Point p;
  
  	if (kind < 0 || kind > kLastWindowKind) {
  		return 0;
  	}
! 	InitWinFile ();
! 	if (!savePos [kind].validSize) {
  		return 0;
  	}
  	*width = savePos [kind].width;
***************
*** 133,161 ****
  }
  
  
! void
  SavePosition (short kind, short top, short left)
  {
- 	InitWinFile ();
  	if (kind < 0 || kind > kLastWindowKind) {
  		dprintf ("Save bad kind %d", kind);
  		return;
  	}
  	savePos [kind].validPos = 1;
  	savePos [kind].top = top;
  	savePos [kind].left = left;
! 	dprintf ("Save kind %d point (%d,%d)", kind, left, top);
  	FlushWinFile ();
  }
  
  
! void
  SaveSize (short kind, short height, short width)
  {
- 	InitWinFile ();
  	if (kind < 0 || kind > kLastWindowKind) {
  		return;
  	}
  	savePos [kind].validSize = 1;
  	savePos [kind].width = width;
  	savePos [kind].height = height;
--- 124,153 ----
  }
  
  
! static void
  SavePosition (short kind, short top, short left)
  {
  	if (kind < 0 || kind > kLastWindowKind) {
  		dprintf ("Save bad kind %d", kind);
  		return;
  	}
+ 	InitWinFile ();
  	savePos [kind].validPos = 1;
  	savePos [kind].top = top;
  	savePos [kind].left = left;
! 	dprintf ("Save kind %d pt (%d,%d)", kind, left, top);
  	FlushWinFile ();
  }
  
  
! static void
  SaveSize (short kind, short height, short width)
  {
  	if (kind < 0 || kind > kLastWindowKind) {
+ 		dprintf ("Save bad kind %d", kind);
  		return;
  	}
+ 	InitWinFile ();
  	savePos [kind].validSize = 1;
  	savePos [kind].width = width;
  	savePos [kind].height = height;
***************
*** 166,185 ****
  static short
  GetWinKind (WindowPtr win)
  {
! short kind;
! NhWindow *nhw = GetNhWin (win);
! char *typeStr [] = {
! 	"map", "status", "message", "text", "menu" ,
! };
  
! 	if (! nhw || (((long) nhw) & 1) || nhw->its_window != win) {
  		return -1;
  	}
  	kind = ((WindowPeek) win)->windowKind - WIN_BASE_KIND;
  	if (kind < 0 || kind > NHW_TEXT) {
  		return -1;
  	}
! 	dprintf ("Got window kind %d (%lx)->%lx", kind, win, nhw);
  	switch (kind) {
  	case NHW_MAP :
  	case NHW_STATUS :
--- 158,173 ----
  static short
  GetWinKind (WindowPtr win)
  {
! 	short kind;
  
! 	if (!CheckNhWin (win)) {
  		return -1;
  	}
  	kind = ((WindowPeek) win)->windowKind - WIN_BASE_KIND;
  	if (kind < 0 || kind > NHW_TEXT) {
  		return -1;
  	}
! 	dprintf ("In win kind %d (%lx)", kind, win);
  	switch (kind) {
  	case NHW_MAP :
  	case NHW_STATUS :
***************
*** 196,246 ****
  		kind = kTextWindow;
  		break;
  	}
! 	dprintf ("Returning kind %s", typeStr [kind]);
  	return kind;
  }
  
  
  Boolean
  RetrieveWinPos (WindowPtr win, short *top, short *left)
! {
! 	short kind;
! 
! 	kind = GetWinKind (win);
! 	if (kind < 0 || kind > kLastWindowKind) {
! 		return 0;
! 	}
! 	return RetrievePosition (kind, top, left);
  }
  
  
  void
  SaveWindowPos (WindowPtr win)
  {
- 	short kind;
  	GrafPtr gp;
  	Point p = { 0, 0 };
  
- 	kind = GetWinKind (win);
- 	if (kind < 0 || kind > kLastWindowKind) {
- 		return;
- 	}
  	GetPort (&gp);
  	SetPort (win);
  	LocalToGlobal (&p);
  	AddPt (*(Point *) &(win->portRect), &p); /* Adjust for origin */
  	SetPort (gp);
! 	SavePosition (kind, p.v, p.h);
  }
  
  
  void
  SaveWindowSize (WindowPtr win)
  {
! 	short kind, width, height;
  
- 	kind = GetWinKind (win);
  	width = win->portRect.right - win->portRect.left;
  	height = win->portRect.bottom - win->portRect.top;
! 	SaveSize (kind, height, width);
  }
--- 184,221 ----
  		kind = kTextWindow;
  		break;
  	}
! 	dprintf ("Out kind %d", kind);
  	return kind;
  }
  
  
  Boolean
  RetrieveWinPos (WindowPtr win, short *top, short *left)
! {	return RetrievePosition (GetWinKind (win), top, left);
  }
  
  
  void
  SaveWindowPos (WindowPtr win)
  {
  	GrafPtr gp;
  	Point p = { 0, 0 };
  
  	GetPort (&gp);
  	SetPort (win);
  	LocalToGlobal (&p);
  	AddPt (*(Point *) &(win->portRect), &p); /* Adjust for origin */
  	SetPort (gp);
! 	SavePosition (GetWinKind (win), p.v, p.h);
  }
  
  
  void
  SaveWindowSize (WindowPtr win)
  {
! 	short width, height;
  
  	width = win->portRect.right - win->portRect.left;
  	height = win->portRect.bottom - win->portRect.top;
! 	SaveSize (GetWinKind (win), height, width);
  }
