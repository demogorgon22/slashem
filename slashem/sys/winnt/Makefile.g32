#	Unofficial makefile for SLASH`EM, WinNT tty port
#
#	Requires Gnu gcc compiler for Win32 (Mingw32 or Cygwin)
#	Also requires Gnu Make utility, either Mingw32 or Cygwin version
#
#	For questions or comments: karlgarrison@earthlink.net
#
#	In addition to your C compiler, you will need a workalike for the
#       UNIX yacc and lex utilities.  Theoretically, you should be able to
#       compile without them, but I ran into errors when I tried to do this.
#
#	Note that flex (workalike for lex) and bison (workalike for yacc) are
#       included with the Cygwin package (full version only).  There may be
#       other ports of these tools available for Win32, but these are the only
#       ones I am aware of.


#
# Directory Seperator
#

# Define the variable S below to be whatever directory seperator is appropriate
# for the shell and version of make you are using.

# Compiling from a DOS prompt using make from Mingw32 or Cygwin.  For Cygwin,
# set the enviroment varable MAKE_MODE to UNIX.
S = \\

# Compiling from bash or other UNIX shell
#S = /

# Game Installation Variables
# NOTE: Make sure GAMEDIR exists before make is started.

GAME = slashem
# Specifying a drive letter below may or may not work (untested)
GAMEDIR = $(S)games$(S)$(GAME)d

#
# Directories
#

DDAT  = ..$(S)dat
DUTIL = ..$(S)util
DSRC  = ..$(S)src
DINCL = ..$(S)include
DAT  = ..$(S)dat
DOC  = ..$(S)doc
INCL = ..$(S)include
WSYS = ..$(S)sys$(S)winnt
SRC  = ..$(S)src
SSHR = ..$(S)sys$(S)share
UTIL = ..$(S)util
WIN  = ..$(S)win$(S)tty
WSHR = ..$(S)win$(S)share

#
#  Executables.

CC    = gcc
LINK  = gcc
MAKEBIN  = make

# The copy, del and echo commands don't seem to work from a makefile since
# it's part of the shell rather than an external utility.  We can get around
# this by specifying an external utility that performs the same function like
# the cp and rm commands from Cygwin32, or xcopy for copy.  Another way to do
# it is to call the shell explicitly and use the /c option to run the built-in
# command.  All of these examples appear below.

COPY = command.com /c copy
#COPY = cmd.exe /c copy	# Same as above, but for Windows NT
#COPY = xcopy
#COPY = cp		# UNIX copy command
DEL = command.com /c del
#DEL = cmd.exe /c del	# Same as above, but for Windows NT
#DEL = rm -f		# UNIX del command
#ECHO = command.com /c echo     # For some reason this doesn't seem to work
#ECHO = cmd.exe /c $(ECHO)	# Same as above, but for Windows NT
ECHO = echo.exe # UNIX echo command
#ECHO = djecho.exe # Echo from DJGPP

# if you have a uudecode program, add its name here
# otherwise leave blank
UUDECODE =

#
#  Yacc/Lex ... if you got 'em.
#
# If you have yacc/lex or a work-alike set YACC_LEX to Y
#
YACC_LEX = Y

# If YACC_LEX is Y above, set the following to values appropriate for
# your tools.
#
YACC   = bison -y
LEX    = flex

# Use these for the Cygwin version of Bison and Flex
YTABC  = y.tab.c
YTABH  = y.tab.h
LEXYYC = lex.yy.c

# Use these for the DJGPP version of Bison and Flex
#YTABC  = y_tab.c
#YTABH  = y_tab.h
#LEXYYC = lexyy.c

#
# Uncomment the line below if you want to store all the level files,
# help files, etc. in a single library file.

USE_DLB = N

#############################################################################
#
# nothing below this line should have to be changed
#

GAMEFILE = $(GAMEDIR)$(S)$(GAME).exe

# Changing this conditional block is not recommended
ifeq ($(USE_DLB),Y)
DLBFLG = -DDLB
else
DLBFLG =
endif

#
#  Flags.
#
# Debugging
#CFLAGS = -pg -c -I..$(S)include -I..$(S)sys$(S)winnt $(DLBFLG) -DWIN32CON
#LFLAGS = -pg

#    Normal
CFLAGS = -c -O -I..$(S)include -I..$(S)sys$(S)winnt $(DLBFLG) -DWIN32CON
LFLAGS =

#
#  Utility Objects.
#

MAKESRC	    = makedefs.c

SPLEVSRC    = lev_yacc.c  lev_$(LEX).c	 lev_main.c  panic.c

DGNCOMPSRC  = dgn_yacc.c  dgn_$(LEX).c	 dgn_main.c

MAKEOBJS    = makedefs.o  monst.o	 objects.o

SPLEVOBJS   = lev_yacc.o  lev_$(LEX).o	lev_main.o  alloc.o	\
		monst.o	    objects.o	    panic.o  \
		drawing.o	decl.o

DGNCOMPOBJS = dgn_yacc.o  dgn_$(LEX).o	dgn_main.o  alloc.o	 \
		panic.o

RECOVOBJS   = recover.o


#  Tile related object files.

TEXTIO      = tiletext.o tiletxt.o drawing.o decl.o monst.o objects.o

TEXTIO2     = tiletex2.o tiletxt2.o drawing.o decl.o monst.o objects.o


DLBOBJ = dlb.o

#  Object files for the game itself.

VOBJ01 = allmain.o  alloc.o    apply.o	  artifact.o attrib.o
VOBJ02 = ball.o	    bones.o    botl.o	  cmd.o	     dbridge.o
VOBJ03 = decl.o	    detect.o   display.o  do.o	     do_name.o
VOBJ04 = do_wear.o  dog.o      dogmove.o  dokick.o   dothrow.o
VOBJ05 = drawing.o  dungeon.o  eat.o	  end.o	     engrave.o
VOBJ06 = exper.o    explode.o  extralev.o files.o    fountain.o
VOBJ07 = getline.o  hack.o     hacklib.o  invent.o   lock.o
VOBJ08 = mail.o	    main.o     makemon.o  mcastu.o   mhitm.o
VOBJ09 = mhitu.o    minion.o   mkmap.o	  mklev.o    mkmaze.o
VOBJ10 = mkobj.o    mkroom.o   mon.o	  mondata.o  monmove.o
VOBJ11 = monst.o    monstr.o   mplayer.o  mthrowu.o  muse.o
VOBJ12 = music.o    o_init.o   objects.o  objnam.o   options.o
VOBJ13 = pickup.o   pline.o    polyself.o potion.o   quest.o
VOBJ14 = questpgr.o pager.o    pray.o	  priest.o   read.o
VOBJ15 = rect.o	    restore.o  rip.o	  rnd.o	     rumors.o
VOBJ16 = save.o	    shk.o      shknam.o	  sit.o	     sounds.o
VOBJ17 = sp_lev.o   spell.o    steal.o	  termcap.o  timeout.o
VOBJ18 = topl.o	    topten.o   track.o	  trap.o     u_init.o
VOBJ19 = uhitm.o    vault.o    vision.o	  vis_tab.o  weapon.o
VOBJ20 = were.o	    wield.o    windows.o  wintty.o   wizard.o
VOBJ21 = worm.o	    worn.o     write.o	  zap.o	     light.o
VOBJ22 = dlb.o      dig.o      teleport.o role.o     steed.o
VOBJ23 = tech.o     gypsy.o

SOBJ   = winnt.o    sys.o      unix.o     nttty.o    random.o

VVOBJ  = version.o

VOBJ   = $(VOBJ01) $(VOBJ02) $(VOBJ03) $(VOBJ04) $(VOBJ05) \
	$(VOBJ06) $(VOBJ07) $(VOBJ08) $(VOBJ09) $(VOBJ10) \
	$(VOBJ11) $(VOBJ12) $(VOBJ13) $(VOBJ14) $(VOBJ15) \
	$(VOBJ16) $(VOBJ17) $(VOBJ18) $(VOBJ19) $(VOBJ20) \
	$(VOBJ21) $(VOBJ22) $(VOBJ23)

ALLOBJ = $(VOBJ) $(SOBJ) $(VVOBJ)

#
#  Header Objects.
#

DGN_FILE_H = $(INCL)$(S)align.h	$(INCL)$(S)dgn_file.h
DUNGEON_H  = $(INCL)$(S)align.h	$(INCL)$(S)dungeon.h
EMIN_H	   = $(DUNGEON_H)	$(INCL)$(S)emin.h
EPRI_H	   = $(DUNGEON_H)	$(INCL)$(S)align.h	    $(INCL)$(S)epri.h
ESHK_H	   = $(DUNGEON_H)	$(INCL)$(S)eshk.h
MONDATA_H  = $(INCL)$(S)align.h	$(INCL)$(S)mondata.h
MONST_H	   = $(INCL)$(S)align.h	$(INCL)$(S)monst.h
PERMONST_H = $(INCL)$(S)monattk.h	$(INCL)$(S)monflag.h   $(INCL)$(S)align.h   \
	    $(INCL)$(S)permonst.h
RM_H	   = $(INCL)$(S)align.h	$(INCL)$(S)rm.h
SP_LEV_H   = $(INCL)$(S)align.h	$(INCL)$(S)sp_lev.h
VAULT_H	   = $(DUNGEON_H)	$(INCL)$(S)vault.h
YOUPROP_H  = $(PERMONST_H)	$(MONDATA_H)	    $(INCL)$(S)prop.h    \
	    $(INCL)$(S)pm.h       $(INCL)$(S)youprop.h
YOU_H	   = $(MONST_H)		$(YOUPROP_H)	    $(INCL)$(S)align.h   \
	     $(INCL)$(S)attrib.h	$(INCL)$(S)you.h
DISPLAY_H  = $(MONDATA_H)	$(INCL)$(S)vision.h    $(INCL)$(S)display.h
NTCONF_H   = $(INCL)$(S)micro.h	$(INCL)$(S)system.h    $(INCL)$(S)ntconf.h
CONFIG_H   = $(GLOBAL_H)	$(INCL)$(S)tradstdc.h  $(INCL)$(S)config.h
DECL_H	   = $(YOU_H)		$(INCL)$(S)spell.h	    $(INCL)$(S)color.h   \
	     $(INCL)$(S)obj.h	$(INCL)$(S)onames.h    $(INCL)$(S)pm.h      \
	      $(INCL)$(S)decl.h
GLOBAL_H   = $(NTCONF_H)	$(INCL)$(S)coord.h	    $(INCL)$(S)global.h
HACK_H	   = $(CONFIG_H)	$(DUNGEON_H)	    $(DECL_H)	      \
	       $(DISPLAY_H)	  $(INCL)$(S)monsym.h    $(INCL)$(S)mkroom.h	\
	      $(INCL)$(S)objclass.h $(INCL)$(S)trap.h	     $(INCL)$(S)flag.h    \
	      $(RM_H)		 $(INCL)$(S)vision.h    $(INCL)$(S)wintype.h \
	      $(INCL)$(S)engrave.h	 $(INCL)$(S)rect.h	  \
	       $(INCL)$(S)trampoli.h $(INCL)$(S)hack.h
DLB_H      = $(INCL)$(S)dlb.h

ifeq ($(USE_DLB),Y)
DLB = $(DAT)$(S)nhdat
DLBOBJS = dlb_main.o dlb.o alloc.o panic.o
else
DLB =
DLBOBJS =
endif

#
#  Make Rules.
#

.SUFFIXES:  .exe .o .c .y .l

.c.o:
	$(CC) $(CFLAGS) -o$@ $<

#.phony: dlb

#
#  Primary Targets.
#

#  The default target.

default: $(GAMEFILE)

all: install.tag

util: utility.tag

install: install.tag

utility.tag: $(INCL)$(S)date.h $(INCL)$(S)trap.h $(INCL)$(S)onames.h \
	$(INCL)$(S)pm.h	  monstr.c   vis_tab.c $(INCL)$(S)filename.h \
	lev_comp.exe	 dgn_comp.exe	 recover.exe $(TILEUTIL)
	$(ECHO) utilities made > utility.tag

install.tag: dat.tag $(GAMEFILE)
ifeq ($(USE_DLB),Y)
	$(COPY) $(DLB)         $(GAMEDIR)
	$(COPY) $(DAT)$(S)license       $(GAMEDIR)
else
	$(COPY) $(DAT)$(S)*.            $(GAMEDIR)
	$(COPY) $(DAT)$(S)*.dat         $(GAMEDIR)
	$(COPY) $(DAT)$(S)*.lev         $(GAMEDIR)
	$(DEL) $(GAMEDIR)$(S)makefile.
endif
	$(COPY) $(SSHR)$(S)NetHack.cnf  $(GAMEDIR)$(S)$(GAME).cnf
	$(COPY) recover.exe          $(GAMEDIR)
	$(COPY) $(DOC)$(S)guidebook.txt   $(GAMEDIR)
	$(COPY) $(DOC)$(S)recover.txt $(GAMEDIR)
	$(COPY) $(DOC)$(S)$(GAME).txt $(GAMEDIR)
	$(COPY) ..$(S)readme.txt $(GAMEDIR)
	$(COPY) ..$(S)slamfaq.txt $(GAMEDIR)
	$(COPY) ..$(S)history.txt $(GAMEDIR)
	$(ECHO) install done > install.tag

#  The main target.


$(GAMEFILE): utility.tag $(ALLOBJ)
	$(LINK) $(LFLAGS) -o$(GAME).exe $(ALLOBJ)
	$(COPY) $(GAME).exe $(GAMEFILE)
	$(DEL) $(GAME).exe

#
#  Housekeeping.
#

clean:
	$(DEL) \*.o
	$(DEL) \*.map
	$(DEL) dlb_main.exe

spotless: clean
	$(DEL) utility.tag
	$(DEL) install.tag
	$(DEL) dat.tag
	$(DEL) $(GAME).lnk
	$(DEL) makedefs.exe
	$(DEL) lev_comp.exe
	$(DEL) dgn_comp.exe
	$(DEL) $(SRC)$(S)lev_lex.c
	$(DEL) $(SRC)$(S)lev_yacc.c
	$(DEL) $(SRC)$(S)dgn_lex.c
	$(DEL) $(SRC)$(S)dgn_yacc.c
	$(DEL) recover.exe
	$(DEL) $(INCL)$(S)onames.h
	$(DEL) $(INCL)$(S)pm.h
	$(DEL) $(INCL)$(S)vis_tab.h
	$(DEL) $(INCL)$(S)portio.h
	$(DEL) $(INCL)$(S)dgn_comp.h
	$(DEL) $(INCL)$(S)lev_comp.h
	$(DEL) $(SRC)$(S)monstr.c
	$(DEL) $(SRC)$(S)vis_tab.c
	$(DEL) $(SRC)$(S)panic.c
	$(DEL) $(SRC)$(S)makedefs.c
	$(DEL) $(SRC)$(S)recover.c
	$(DEL) $(SRC)$(S)lev_main.c
	$(DEL) $(SRC)$(S)dlb_main.c
	$(DEL) $(SRC)$(S)dgn_main.c
	$(DEL) $(SRC)$(S)wintty.c
	$(DEL) $(SRC)$(S)nttty.c
	$(DEL) $(SRC)$(S)topl.c
	$(DEL) $(SRC)$(S)getline.c
	$(DEL) $(SRC)$(S)termcap.c
	$(DEL) $(SRC)$(S)winnt.c
	$(DEL) $(SRC)$(S)pckeys.c
	$(DEL) $(SRC)$(S)pcmain.c
	$(DEL) $(SRC)$(S)pcunix.c
	$(DEL) $(SRC)$(S)pcsys.c
	$(DEL) $(INCL)$(S)date.h
	$(DEL) $(INCL)$(S)onames.h
	$(DEL) $(INCL)$(S)pm.h
	$(DEL) $(INCL)$(S)vis_tab.h
	$(DEL) $(INCL)$(S)filename.h
	$(DEL) vis_tab.c
	$(DEL) $(SRC)$(S)random.c
	$(DEL) *.def
	$(DEL) *.map
	$(DEL) $(DAT)$(S)data
	$(DEL) $(DAT)$(S)dungeon.pdf
	$(DEL) $(DAT)$(S)*.lev
	$(DEL) $(DAT)$(S)data
	$(DEL) $(DAT)$(S)dungeon
	$(DEL) $(DAT)$(S)options
	$(DEL) $(DAT)$(S)oracles
	$(DEL) $(DAT)$(S)rumors
	$(DEL) $(DAT)$(S)quest.dat
	$(DEL) $(DLB)
	$(DEL) $(DAT)$(S)dlb.lst
	$(DEL) $(DAT)$(S)dlb_main.exe
	$(DEL) $(DAT)$(S)lev_comp.exe
	$(DEL) $(DAT)$(S)dgn_comp.exe
	$(DEL) sp_lev.tag
	$(DEL) $(UTIL)$(S)lev_comp
	$(DEL) $(UTIL)$(S)dlb_main
	$(DEL) $(UTIL)$(S)dgn_yacc
	$(DEL) $(UTIL)$(S)dgn_lex
	$(DEL) $(UTIL)$(S)makedefs


#
#  Secondary Targets.
#
#  The following include files depend on makedefs to be created.
#
#  date.h should be remade every time any of the source or include
#  files is modified.


$(INCL)$(S)date.h : makedefs.exe
	.$(S)makedefs -v

$(INCL)$(S)onames.h: makedefs.exe
	.$(S)makedefs -o

$(INCL)$(S)pm.h: makedefs.exe
	.$(S)makedefs -p

monstr.c: makedefs.exe
	.$(S)makedefs -m

$(INCL)$(S)vis_tab.h: makedefs.exe
	.$(S)makedefs -z

vis_tab.c: makedefs.exe
	.$(S)makedefs -z

$(INCL)$(S)filename.h: makedefs.exe
	.$(S)makedefs -f

#
#  Makedefs Stuff
#

makedefs.exe:  $(MAKEOBJS)
	$(LINK) $(LFLAGS) -omakedefs.exe $(MAKEOBJS)

makedefs.c: $(UTIL)$(S)makedefs.c
	$(COPY) $(UTIL)$(S)makedefs.c .

makedefs.o:  $(CONFIG_H)	$(PERMONST_H)	   $(INCL)$(S)objclass.h \
		$(INCL)$(S)monsym.h   $(INCL)$(S)qtext.h $(UTIL)$(S)makedefs.c

#
#  Level Compiler Dependencies
#

lev_comp.exe:  $(SPLEVOBJS)
	$(LINK) $(LFLAGS) -olev_comp.exe $(SPLEVOBJS)

ifeq ($(YACC_LEX),Y)

lev_yacc.o:  $(HACK_H)	 $(SP_LEV_H)	lev_yacc.c
	$(CC) $(CFLAGS) -o$@ lev_yacc.c

else

lev_yacc.o:  $(HACK_H)	 $(SP_LEV_H) $(INCL)$(S)lev_comp.h lev_yacc.c
	$(CC) $(CFLAGS) -o$@ lev_yacc.c

endif

lev_$(LEX).o:  $(HACK_H)   $(SP_LEV_H)	  $(INCL)$(S)lev_comp.h \
	lev_$(LEX).c
	$(CC) $(CFLAGS) -o$@ lev_$(LEX).c

lev_main.c:  $(UTIL)$(S)lev_main.c
	$(COPY) $(UTIL)$(S)lev_main.c .

lev_main.o:  $(HACK_H) lev_main.c

$(INCL)$(S)lev_comp.h: lev_yacc.c

ifeq ($(YACC_LEX),Y)

lev_yacc.c:  $(UTIL)$(S)lev_comp.y
	$(YACC) -d $(DUTIL)$(S)lev_comp.y
	$(COPY) $(YTABC) $@
	$(COPY) $(YTABH) $(INCL)$(S)lev_comp.h
	$(DEL) $(YTABC)
	$(DEL) $(YTABH)

lev_$(LEX).c:  $(UTIL)$(S)lev_comp.l
	$(LEX) $(DUTIL)$(S)lev_comp.l
	$(COPY) $(LEXYYC) $@
	$(DEL) $(LEXYYC)
else

lev_yacc.c: $(SSHR)$(S)lev_yacc.c
	$(COPY) $(SSHR)$(S)lev_yacc.c $@

$(INCL)$(S)lev_comp.h: $(SSHR)$(S)lev_comp.h
	$(COPY) $(SSHR)$(S)lev_comp.h $@
	touch $(DINCL)$(S)lev_comp.h

lev_$(LEX).c: $(SSHR)$(S)lev_lex.c
	$(COPY) $(SSHR)$(S)lev_lex.c $@

endif



#
#  Dungeon Dependencies
#

dgn_comp.exe:  $(DGNCOMPOBJS)
	$(LINK) $(LFLAGS) -odgn_comp.exe $(DGNCOMPOBJS)

ifeq ($(YACC_LEX),Y)

dgn_yacc.o:  $(HACK_H)	 $(DGN_FILE_H)	dgn_yacc.c
	$(CC) $(CFLAGS) -o$@ dgn_yacc.c

else

dgn_yacc.o:  $(HACK_H)	 $(DGN_FILE_H)	$(INCL)$(S)dgn_comp.h dgn_yacc.c
	$(CC) $(CFLAGS) -o$@ dgn_yacc.c

endif

dgn_$(LEX).o:  $(HACK_H)   $(DGN_FILE_H)  $(INCL)$(S)dgn_comp.h \
	dgn_$(LEX).c
	$(CC) $(CFLAGS) -o$@ dgn_$(LEX).c

dgn_main.c:  $(UTIL)$(S)dgn_main.c
	$(COPY) $(UTIL)$(S)dgn_main.c .

dgn_main.o:  $(HACK_H)

$(INCL)$(S)dgn_comp.h:  dgn_yacc.c

ifeq ($(YACC_LEX),Y)

dgn_yacc.c: $(UTIL)$(S)dgn_comp.y
	$(YACC) -d $(DUTIL)$(S)dgn_comp.y
	$(COPY) $(YTABC) $@
	$(COPY) $(YTABH) $(INCL)$(S)dgn_comp.h
	$(DEL) $(YTABC)
	$(DEL) $(YTABH)

dgn_$(LEX).c:  $(UTIL)$(S)dgn_comp.l
	$(LEX) $(DUTIL)$(S)dgn_comp.l
	$(COPY) $(LEXYYC) $@
	$(DEL) $(LEXYYC)

else

dgn_yacc.c: $(SSHR)$(S)dgn_yacc.c
	$(COPY) $(SSHR)$(S)dgn_yacc.c $@

$(INCL)$(S)dgn_comp.h: $(SSHR)$(S)dgn_comp.h
	$(COPY) $(SSHR)$(S)dgn_comp.h $@
	touch $(DINCL)$(S)dgn_comp.h

dgn_$(LEX).c: $(SSHR)$(S)dgn_lex.c
	$(COPY) $(SSHR)$(S)dgn_lex.c $@
 
endif

#
#  Recover Utility
#

recover.exe:   $(RECOVOBJS)
	$(LINK) $(LFLAGS) -orecover.exe recover.o

recover.c:  $(UTIL)$(S)recover.c
	$(COPY) $(UTIL)$(S)recover.c .

recover.o:   $(CONFIG_H) recover.c
	$(CC) $(CFLAGS) -o$@ recover.c

#
#  Other Util Dependencies.
#

alloc.o: $(CONFIG_H)	 alloc.c
	$(CC) $(CFLAGS) -oalloc.o alloc.c

drawing.o: $(CONFIG_H) drawing.c
	$(CC) $(CFLAGS) -odrawing.o drawing.c

decl.o: $(CONFIG_H) decl.c
	$(CC) $(CFLAGS) -odecl.o decl.c

monst.o: $(CONFIG_H)	     $(PERMONST_H)	$(ESHK_H)	   \
	$(EPRI_H)	      $(VAULT_H)	 $(INCL)$(S)monsym.h   \
	$(INCL)$(S)color.h      objects.o	 monst.c
	$(CC) $(CFLAGS) -omonst.o monst.c

objects.o: $(CONFIG_H)	      $(INCL)$(S)obj.h	 $(INCL)$(S)objclass.h \
	$(INCL)$(S)prop.h	    $(INCL)$(S)color.h    objects.c
	$(CC) $(CFLAGS) -oobjects.o objects.c

panic.c:  $(UTIL)$(S)panic.c
	$(COPY) $(UTIL)$(S)panic.c .

panic.o:   $(CONFIG_H)	  panic.c

random.c: $(SSHR)$(S)random.c
	$(COPY) $(SSHR)$(S)random.c .

random.o: random.c
	$(CC) $(CFLAGS) -orandom.o random.c

DATABASE = $(DAT)$(S)data.base

dat.tag: $(DAT)$(S)data	     $(DAT)$(S)rumors	 $(DAT)$(S)dungeon \
	$(DAT)$(S)oracles	    $(DAT)$(S)quest.dat	sp_lev.tag \
	$(DLB)
	$(ECHO) dat done >dat.tag

$(DAT)$(S)data:	 utility.tag	$(DATABASE)
	.$(S)makedefs -d

$(DAT)$(S)rumors:	     utility.tag    $(DAT)$(S)rumors.tru	$(DAT)$(S)rumors.fal
	.$(S)makedefs -r

$(DAT)$(S)quest.dat: utility.tag  $(DAT)$(S)quest.txt
	.$(S)makedefs -q

$(DAT)$(S)oracles:	     utility.tag    $(DAT)$(S)oracles.txt
	.$(S)makedefs -h

sp_lev.tag: utility.tag     $(DAT)\beholder.des $(DAT)\bigroom.des \
	$(DAT)$(S)blkmar.des   $(DAT)$(S)castle.des   $(DAT)$(S)caves.des \
	$(DAT)$(S)darkelf.des  $(DAT)$(S)dragons.des  $(DAT)$(S)endgame.des \
	$(DAT)$(S)gehennom.des $(DAT)$(S)giants.des   $(DAT)$(S)guild.des \
	$(DAT)$(S)knox.des     $(DAT)$(S)kobold-1.des $(DAT)$(S)kobold-2.des \
	$(DAT)$(S)lich.des     $(DAT)$(S)mall-1.des   $(DAT)$(S)mall-2.des \
	$(DAT)$(S)medusa.des   $(DAT)$(S)sokoban.des \
	$(DAT)$(S)mines.des    $(DAT)$(S)mtemple.des  $(DAT)$(S)newmall.des \
	$(DAT)$(S)nymph.des    $(DAT)$(S)oracle.des   $(DAT)$(S)rats.des \
	$(DAT)$(S)sea.des      $(DAT)$(S)spiders.des  $(DAT)$(S)stor-1.des \
	$(DAT)$(S)stor-2.des   $(DAT)$(S)stor-3.des   $(DAT)$(S)tomb.des \
	$(DAT)$(S)tower.des    $(DAT)$(S)yendor.des \
	$(DAT)$(S)arch.des     $(DAT)$(S)barb.des      $(DAT)$(S)caveman.des \
	$(DAT)$(S)dopp.des     $(DAT)$(S)elf.des       $(DAT)$(S)flame.des \
	$(DAT)$(S)gnome.des    $(DAT)$(S)healer.des    $(DAT)$(S)ice.des \
	$(DAT)$(S)knight.des   $(DAT)$(S)lycn.des     $(DAT)$(S)monk.des \
	$(DAT)$(S)necro.des    $(DAT)$(S)priest.des   $(DAT)$(S)rogue.des \
	$(DAT)$(S)samurai.des  $(DAT)$(S)tourist.des  $(DAT)$(S)slayer.des \
	$(DAT)$(S)valkyrie.des $(DAT)$(S)wizard.des   $(DAT)$(S)yeoman.des \
	$(DAT)$(S)hobbit.des   $(DAT)$(S)frnknstn.des $(DAT)$(S)dwarf.des \
	$(DAT)$(S)nightmar.des
	.$(S)lev_comp $(DAT)$(S)beholder.des
	.$(S)lev_comp $(DAT)$(S)bigroom.des
	.$(S)lev_comp $(DAT)$(S)blkmar.des
	.$(S)lev_comp $(DAT)$(S)castle.des
	.$(S)lev_comp $(DAT)$(S)caves.des
	.$(S)lev_comp $(DAT)$(S)darkelf.des
	.$(S)lev_comp $(DAT)$(S)dragons.des
	.$(S)lev_comp $(DAT)$(S)endgame.des
	.$(S)lev_comp $(DAT)$(S)gehennom.des
	.$(S)lev_comp $(DAT)$(S)giants.des
	.$(S)lev_comp $(DAT)$(S)guild.des
	.$(S)lev_comp $(DAT)$(S)knox.des
	.$(S)lev_comp $(DAT)$(S)kobold-1.des
	.$(S)lev_comp $(DAT)$(S)kobold-2.des
	.$(S)lev_comp $(DAT)$(S)lich.des
	.$(S)lev_comp $(DAT)$(S)mall-1.des
	.$(S)lev_comp $(DAT)$(S)mall-2.des
	.$(S)lev_comp $(DAT)$(S)medusa.des
	.$(S)lev_comp $(DAT)$(S)sokoban.des
	.$(S)lev_comp $(DAT)$(S)mines.des
	.$(S)lev_comp $(DAT)$(S)mtemple.des
	.$(S)lev_comp $(DAT)$(S)newmall.des
	.$(S)lev_comp $(DAT)$(S)nymph.des
	.$(S)lev_comp $(DAT)$(S)medusa.des
	.$(S)lev_comp $(DAT)$(S)rats.des
	.$(S)lev_comp $(DAT)$(S)sea.des
	.$(S)lev_comp $(DAT)$(S)spiders.des
	.$(S)lev_comp $(DAT)$(S)stor-1.des
	.$(S)lev_comp $(DAT)$(S)stor-2.des
	.$(S)lev_comp $(DAT)$(S)stor-3.des
	.$(S)lev_comp $(DAT)$(S)tomb.des
	.$(S)lev_comp $(DAT)$(S)tower.des
	.$(S)lev_comp $(DAT)$(S)yendor.des
	.$(S)lev_comp $(DAT)$(S)arch.des
	.$(S)lev_comp $(DAT)$(S)barb.des
	.$(S)lev_comp $(DAT)$(S)caveman.des
	.$(S)lev_comp $(DAT)$(S)dopp.des
	.$(S)lev_comp $(DAT)$(S)elf.des
	.$(S)lev_comp $(DAT)$(S)flame.des
	.$(S)lev_comp $(DAT)$(S)gnome.des
	.$(S)lev_comp $(DAT)$(S)healer.des
	.$(S)lev_comp $(DAT)$(S)ice.des
	.$(S)lev_comp $(DAT)$(S)knight.des
	.$(S)lev_comp $(DAT)$(S)lycn.des
	.$(S)lev_comp $(DAT)$(S)monk.des
	.$(S)lev_comp $(DAT)$(S)necro.des
	.$(S)lev_comp $(DAT)$(S)priest.des
	.$(S)lev_comp $(DAT)$(S)rogue.des
	.$(S)lev_comp $(DAT)$(S)samurai.des
	.$(S)lev_comp $(DAT)$(S)tourist.des
	.$(S)lev_comp $(DAT)$(S)slayer.des
	.$(S)lev_comp $(DAT)$(S)valkyrie.des
	.$(S)lev_comp $(DAT)$(S)wizard.des
	.$(S)lev_comp $(DAT)$(S)yeoman.des
	.$(S)lev_comp $(DAT)$(S)hobbit.des
	.$(S)lev_comp $(DAT)$(S)frnknstn.des
	.$(S)lev_comp $(DAT)$(S)dwarf.des
	.$(S)lev_comp $(DAT)$(S)nightmar.des
	$(COPY) \*.lev $(DAT)
	$(ECHO) sp_levs done > sp_lev.tag
	
$(DAT)$(S)dungeon:	  utility.tag  $(DAT)$(S)dungeon.def
	.$(S)makedefs -e
	.$(S)dgn_comp $(DAT)$(S)dungeon.pdf
#
# DLB stuff
#
$(DLB):	dlb_main.exe
	$(ECHO) data >$(DAT)$(S)dlb.lst
	$(ECHO) dungeon >>$(DAT)$(S)dlb.lst
	$(ECHO) oracles >>$(DAT)$(S)dlb.lst
	$(ECHO) options >>$(DAT)$(S)dlb.lst
	$(ECHO) quest.dat >>$(DAT)$(S)dlb.lst
	$(ECHO) rumors >>$(DAT)$(S)dlb.lst
	$(ECHO) help >>$(DAT)$(S)dlb.lst
	$(ECHO) hh >>$(DAT)$(S)dlb.lst
	$(ECHO) cmdhelp >>$(DAT)$(S)dlb.lst
	$(ECHO) history >>$(DAT)$(S)dlb.lst
	$(ECHO) opthelp >>$(DAT)$(S)dlb.lst
	$(ECHO) wizhelp >>$(DAT)$(S)dlb.lst
	$(ECHO) license >>$(DAT)$(S)dlb.lst
	$(ECHO) gypsy.txt >>$(DAT)$(S)dlb.lst
	cd $(DAT) ; $(ECHO) *.lev >>dlb.lst
# The line above works, but the line below doesn't.  I can't figure-out why.
	cd $(DAT) ; .$(S)dlb_main cvIf dlb.lst nhdat

dlb_main.exe: $(DLBOBJS)
	$(LINK) $(LFLAGS) -odlb_main.exe $(DLBOBJS)
	$(COPY) $@ $(DAT)$(S)dlb_main.exe


dlb_main.o: $(UTIL)$(S)dlb_main.c $(INCL)$(S)config.h $(DLB_H)
	$(COPY) $(UTIL)$(S)dlb_main.c .
	$(CC) $(CFLAGS) -odlb_main.o dlb_main.c

# Game Dependencies

# sys/share
main.o:	 $(HACK_H) $(DLB_H) $(SSHR)$(S)pcmain.c
	$(COPY) $(SSHR)$(S)pcmain.c .
	$(CC) $(CFLAGS) -o$@ pcmain.c

unix.o:	 $(HACK_H) $(SSHR)$(S)pcunix.c
	$(COPY) $(SSHR)$(S)pcunix.c .
	$(CC) $(CFLAGS) -o$@ pcunix.c

sys.o : $(HACK_H) $(SSHR)$(S)pcsys.c
	$(COPY) $(SSHR)$(S)pcsys.c .
	$(CC) $(CFLAGS) -o$@ pcsys.c

# sys/winnt
winnt.o : $(HACK_H)  $(WSYS)$(S)winnt.c
	$(COPY) $(WSYS)$(S)winnt.c .
	$(COPY) $(WSYS)$(S)win32api.h ..$(S)include
	$(CC) $(CFLAGS) -o$@ winnt.c

nttty.o : $(HACK_H)  $(WSYS)$(S)nttty.c
	$(COPY) $(WSYS)$(S)nttty.c .
	$(CC) $(CFLAGS) -o$@ nttty.c


# win/tty
getline.o : $(HACK_H) $(INCL)$(S)wintty.h $(WIN)$(S)getline.c
	$(COPY) $(WIN)$(S)getline.c .
	$(CC) $(CFLAGS) -o$@ getline.c

termcap.o : $(CONFIG_H) $(WIN)$(S)termcap.c
	$(COPY) $(WIN)$(S)termcap.c .
	$(CC) $(CFLAGS) -o$@ termcap.c

topl.o : $(CONFIG_H) $(WIN)$(S)topl.c
	$(COPY) $(WIN)$(S)topl.c .
	$(CC) $(CFLAGS) -o$@ topl.c

wintty.o : $(CONFIG_H) $(WIN)$(S)wintty.c
	$(COPY) $(WIN)$(S)wintty.c .
	$(CC) $(CFLAGS) -o$@ wintty.c

# src dependencies
allmain.o:  $(HACK_H)
alloc.o:    $(CONFIG_H)
apply.o:    $(HACK_H) $(INCL)$(S)edog.h
artifact.o: $(HACK_H) $(INCL)$(S)artifact.h $(INCL)$(S)artilist.h
attrib.o:   $(HACK_H) $(INCL)$(S)artifact.h
ball.o:	    $(HACK_H)
bones.o:    $(HACK_H) $(INCL)$(S)lev.h
botl.o:	    $(HACK_H)
cmd.o:	    $(HACK_H) $(INCL)$(S)func_tab.h
dbridge.o:  $(HACK_H)
decl.o:	    $(HACK_H) $(INCL)$(S)quest.h
detect.o:   $(HACK_H) $(INCL)$(S)artifact.h
dig.o:      $(HACK_H)
display.o:  $(HACK_H)
dlb.o:      $(HACK_H) $(DLB_H)
do.o:	    $(HACK_H) $(INCL)$(S)lev.h
do_name.o:  $(HACK_H)
do_wear.o:  $(HACK_H)
dog.o:	    $(HACK_H) $(INCL)$(S)edog.h
dogmove.o:  $(HACK_H) $(INCL)$(S)mfndpos.h $(INCL)$(S)edog.h
dokick.o:   $(HACK_H) $(ESHK_H)
dothrow.o:  $(HACK_H)
drawing.o:  $(HACK_H) $(INCL)$(S)termcap.h
dungeon.o:  $(HACK_H) $(INCL)$(S)dgn_file.h
eat.o:	    $(HACK_H)
end.o:	    $(HACK_H) $(ESHK_H)
engrave.o:  $(HACK_H) $(INCL)$(S)lev.h
exper.o:    $(HACK_H)
explode.o:  $(HACK_H)
extralev.o:  $(HACK_H)
files.o:     $(HACK_H) $(INCL)$(S)file.h $(INCL)$(S)filename.h
fountain.o:  $(HACK_H)
gypsy.o:     $(HACK_H)
hack.o:	     $(HACK_H)
hacklib.o:   $(HACK_H)
invent.o:    $(HACK_H) $(INCL)$(S)artifact.h
light.o:     $(HACK_H) $(INCL)$(S)lev.h
lock.o:	     $(HACK_H)
mail.o:	     $(HACK_H) $(INCL)$(S)mail.h
makemon.o:   $(HACK_H) $(EPRI_H) $(EMIN_H)
mcastu.o:    $(HACK_H)
mhitm.o:     $(HACK_H) $(INCL)$(S)artifact.h $(INCL)$(S)edog.h
mhitu.o:     $(HACK_H) $(INCL)$(S)artifact.h $(INCL)$(S)edog.h
minion.o:    $(HACK_H) $(EMIN_H) $(EPRI_H)
mklev.o:     $(HACK_H)
mkmap.o:     $(HACK_H) $(INCL)$(S)sp_lev.h
mkmaze.o:    $(HACK_H) $(INCL)$(S)sp_lev.h
mkobj.o:     $(HACK_H) $(INCL)$(S)artifact.h $(INCL)$(S)prop.h
mkroom.o:    $(HACK_H)
mon.o:	     $(HACK_H) $(INCL)$(S)mfndpos.h $(INCL)$(S)edog.h
mondata.o:   $(HACK_H) $(ESHK_H) $(EPRI_H)
monmove.o:   $(HACK_H) $(INCL)$(S)mfndpos.h $(INCL)$(S)artifact.h
monst.o:     $(CONFIG_H) $(PERM_H) $(ESHK_H) $(EPRI_H) \
	  $(INCL)$(S)color.h $(INCL)$(S)monsym.h $(INCL)$(S)vault.h
mplayer.o:   $(HACK_H)
mthrowu.o:   $(HACK_H)
muse.o:	     $(HACK_H)
music.o:     $(HACK_H)
o_init.o:    $(HACK_H)
objects.o:   $(CONFIG_H) $(INCL)$(S)obj.h $(INCL)$(S)objclass.h \
	       $(INCL)$(S)prop.h $(INCL)$(S)color.h
objnam.o:    $(HACK_H)
options.o:   $(CONFIG_H) $(HACK_H) $(INCL)$(S)objclass.h $(INCL)$(S)flag.h \
	      $(INCL)$(S)termcap.h
pager.o:     $(HACK_H)
pickup.o:    $(HACK_H)
pline.o:     $(HACK_H) $(EPRI_H)
polyself.o:  $(HACK_H)
potion.o:    $(HACK_H)
pray.o:	     $(HACK_H) $(EPRI_H)
priest.o:    $(HACK_H) $(INCL)$(S)mfndpos.h $(ESHK_H) $(EPRI_H) $(EMIN_H)
quest.o:     $(HACK_H) $(INCL)$(S)quest.h $(INCL)$(S)qtext.h
questpgr.o:  $(HACK_H) $(INCL)$(S)qtext.h
read.o:	     $(HACK_H)
rect.o:	     $(HACK_H)
restore.o:   $(HACK_H) $(INCL)$(S)lev.h $(INCL)$(S)termcap.h $(INCL)$(S)quest.h
rip.o:	     $(HACK_H)
role.o:      $(HACK_H)
rnd.o:	     $(HACK_H)
rumors.o:    $(HACK_H)
save.o:	     $(HACK_H) $(INCL)$(S)lev.h $(INCL)$(S)quest.h
shk.o:	     $(HACK_H) $(ESHK_H)
shknam.o:    $(HACK_H) $(ESHK_H)
sit.o:	     $(HACK_H) $(INCL)$(S)artifact.h
sounds.o:    $(HACK_H) $(INCL)$(S)edog.h
sp_lev.o:    $(HACK_H) $(INCL)$(S)sp_lev.h $(INCL)$(S)align.h $(INCL)$(S)rect.h
spell.o:     $(HACK_H)
steal.o:     $(HACK_H)
steed.o:     $(HACK_H)
tech.o:      $(HACK_H) $(INCL)\tech.h
teleport.o:  $(HACK_H)
tile.o:	     $(HACK_H) $(TILE_H)
timeout.o:   $(HACK_H)
topten.o:    $(HACK_H)
track.o:     $(HACK_H)
trap.o:	     $(HACK_H)
u_init.o:    $(HACK_H)
uhitm.o:     $(HACK_H)
vault.o:     $(HACK_H) $(INCL)$(S)vault.h
version.o:   $(HACK_H) $(INCL)$(S)patchlevel.h
vision.o:    $(HACK_H) $(INCL)$(S)vis_tab.h
weapon.o:    $(HACK_H) $(INCL)\skills.h
were.o:	     $(HACK_H)
wield.o:     $(HACK_H)
windows.o:   $(HACK_H) $(INCL)$(S)wintty.h
wizard.o:    $(HACK_H) $(INCL)$(S)qtext.h
worm.o:	     $(HACK_H) $(INCL)$(S)lev.h
worn.o:	     $(HACK_H)
write.o:     $(HACK_H)
zap.o:	     $(HACK_H)

# end of file
